package preRunResults

import "fmt"

type PreRunResults struct {
	results5 map[string]string
	results10 map[string]string
	//results15 map[string]string
	//results20 map[string]string
	//results25 map[string]string
}

func NewPreRunResults() PreRunResults {
	//Create the maps that holds the results of the algorithm
	results5 := map[string]string{
		"leader": "4",
		"crashLeader": "1",
		"crashResults": "4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-0,4,START-2,4,START-1,4,START-3,4,START-4,0,START-4,1,START-4,2,START-4,3,START-4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-0,1,START-3,1,START-2,1,START-1,0,START-1,2,START-1,3,START-1,0,ALIVE-1,2,ALIVE-1,3,ALIVE-1,4,ALIVE",
		"results": "3,0,ALIVE-3,1,ALIVE-3,2,ALIVE-3,4,ALIVE-4,3,START-1,0,ALIVE-1,2,ALIVE-4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-1,3,ALIVE-1,4,ALIVE-0,1,START-0,3,START-0,4,START-2,1,START-2,3,START-2,4,START-1,0,START-1,2,START-1,3,START-1,4,START-4,0,START-4,1,START-4,2,START-4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-3,0,START-3,1,START-3,2,START-3,4,START-2,1,START-2,3,START-0,1,START-0,3,START-4,3,START-4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-3,0,START-3,2,START-1,0,START-1,2,START-1,3,START-0,1,START-0,3,START-1,0,START-4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-2,1,START-2,3,START-3,0,START-3,1,START-3,2,START-1,2,START-1,3,START-0,1,START-0,3,START-2,1,START-2,3,START-4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-4,0,ALIVE-4,1,ALIVE-4,2,ALIVE-4,3,ALIVE-3,0,START-3,1,START-3,2,START-1,0,START-1,2,START-1,3,START",
	}
	results10 := map[string]string{
		"leader": "9",
		"crashLeader": "1",
		"crashResults": "9,0,ALIVE-9,1,ALIVE-9,2,ALIVE-9,3,ALIVE-9,4,ALIVE-9,5,ALIVE-9,6,ALIVE-7,0,ALIVE-7,1,ALIVE-7,2,ALIVE-2,9,START-9,7,ALIVE-7,3,ALIVE-7,4,ALIVE-9,8,ALIVE-1,7,START-1,9,START-8,9,START-6,9,START-7,5,ALIVE-5,7,START-5,9,START-4,7,START-4,9,START-7,6,ALIVE-3,7,START-7,8,ALIVE-3,9,START-7,9,ALIVE-0,7,START-0,9,START-6,7,START-8,7,START-7,0,START-7,1,START-7,3,START-7,4,START-7,5,START-7,6,START-7,8,START-7,9,START-5,7,START-2,7,START-0,7,START-9,0,START-4,7,START-9,1,START-9,2,START-9,3,START-9,4,START-9,5,START-9,6,START-9,7,START-9,8,START-9,0,ALIVE-9,1,ALIVE-9,2,ALIVE-9,3,ALIVE-9,4,ALIVE-9,5,ALIVE-9,6,ALIVE-9,7,ALIVE-9,8,ALIVE-3,7,START-6,7,START-1,7,START-7,0,START-7,1,START-7,2,START-7,3,START-3,7,START-8,7,START-7,4,START-7,5,START-7,6,START-4,7,START-7,8,START-9,0,ALIVE-9,1,ALIVE-9,2,ALIVE-9,3,ALIVE-9,4,ALIVE-9,5,ALIVE-9,6,ALIVE-9,7,ALIVE-9,8,ALIVE-0,7,START-7,0,START-7,2,START-7,3,START-7,4,START-7,5,START-7,6,START-7,8,START-6,7,START-1,7,START-8,7,START-9,0,ALIVE-9,1,ALIVE-9,2,ALIVE-9,3,ALIVE-9,4,ALIVE-9,5,ALIVE-9,6,ALIVE-9,7,ALIVE-9,8,ALIVE-2,7,START-5,7,START-9,0,ALIVE-9,1,ALIVE-9,2,ALIVE-8,7,START-7,1,START-7,8,START-1,7,START-5,7,START-9,3,ALIVE-0,7,START-9,4,ALIVE-2,7,START-6,7,START-9,5,ALIVE-9,6,ALIVE-9,7,ALIVE-9,8,ALIVE-3,7,START-4,7,START-0,1,START-7,0,START-1,0,START-1,2,START-6,1,START-5,1,START-2,1,START-4,1,START-7,1,START-3,1,START-8,7,START-8,1,START-7,2,START-7,3,START-7,4,START-1,5,START-7,5,START-1,6,START-7,6,START-7,8,START-1,7,START-7,1,START-1,8,START-1,0,ALIVE-1,2,ALIVE-1,3,ALIVE-1,4,ALIVE-1,5,ALIVE-1,6,ALIVE-1,7,ALIVE-1,8,ALIVE-1,9,ALIVE",
		"results": "6,0,ALIVE-6,1,ALIVE-6,2,ALIVE-6,3,ALIVE-6,4,ALIVE-6,5,ALIVE-6,7,ALIVE-6,8,ALIVE-6,9,ALIVE-2,0,ALIVE-2,1,ALIVE-9,0,ALIVE-8,6,START-5,6,START-9,1,ALIVE-9,2,ALIVE-9,3,ALIVE-9,4,ALIVE-9,5,ALIVE-9,6,ALIVE-9,7,ALIVE-9,8,ALIVE-7,6,START-4,6,START-4,9,START-7,9,START-0,2,START-0,6,START-0,8,START-0,9,START-2,3,ALIVE-2,4,ALIVE-2,5,ALIVE-2,6,ALIVE-2,7,ALIVE-2,8,ALIVE-2,9,ALIVE-3,2,START-3,6,START-3,9,START-8,0,ALIVE-8,1,ALIVE-8,2,ALIVE-8,3,ALIVE-8,4,ALIVE-8,5,ALIVE-8,6,ALIVE-8,7,ALIVE-8,9,ALIVE-1,2,START-1,6,START-1,8,START-1,9,START-4,2,START-6,0,START-4,8,START-6,1,START-6,2,START-2,0,START-2,1,START-2,3,START-5,2,START-2,4,START-5,8,START-0,2,START-0,6,START-0,8,START-6,3,START-6,4,START-6,5,START-6,7,START-6,8,START-6,9,START-2,5,START-2,6,START-2,7,START-2,8,START-2,9,START-8,0,START-8,1,START-8,2,START-8,3,START-8,4,START-8,5,START-8,6,START-8,9,START-3,8,START-7,2,START-7,6,START-7,8,START-5,9,START-9,0,START-9,1,START-9,2,START-9,3,START-9,4,START-9,5,START-9,6,START-9,7,START-9,8,START-9,0,ALIVE-9,1,ALIVE-9,2,ALIVE-9,3,ALIVE-9,4,ALIVE-9,5,ALIVE-9,6,ALIVE-9,7,ALIVE-9,8,ALIVE-1,2,START-1,6,START-1,8,START-4,2,START-4,6,START-4,8,START-9,0,ALIVE-9,1,ALIVE-9,2,ALIVE-9,3,ALIVE-9,4,ALIVE-9,5,ALIVE-9,6,ALIVE-9,7,ALIVE-9,8,ALIVE-5,2,START-5,6,START-5,8,START-7,2,START-3,2,START-3,6,START-3,8,START-8,0,START-8,1,START-8,3,START-8,4,START-8,5,START-8,7,START-2,0,START-2,1,START-2,3,START-2,4,START-2,5,START-2,7,START-2,8,START-6,0,START-6,1,START-6,2,START-6,3,START-6,4,START-6,5,START-6,7,START-6,8,START-0,2,START-0,6,START-0,8,START-3,2,START-3,6,START-7,2,START-6,0,START-5,2,START-6,3,START-5,6,START-2,0,START-9,0,ALIVE-2,1,START-9,1,ALIVE-9,2,ALIVE-9,3,ALIVE-8,0,START-8,2,START-8,3,START-4,2,START-4,6,START-8,5,START-8,6,START-4,8,START-7,6,START-7,8,START-2,3,START-2,4,START-2,5,START-2,6,START-2,7,START-2,8,START-6,5,START-6,7,START-6,8,START-1,2,START-1,6,START-1,8,START-3,8,START-5,8,START-9,4,ALIVE-9,5,ALIVE-9,6,ALIVE-9,7,ALIVE-9,8,ALIVE-8,1,START-8,2,START-8,4,START-8,6,START-8,7,START-5,2,START-5,6,START-5,8,START-7,2,START-0,2,START-3,2,START-4,2,START-3,6,START-4,8,START-6,0,START-6,1,START-6,2,START-6,3,START-6,4,START-6,5,START-6,7,START-6,8,START-2,0,START-2,1,START-2,3,START-2,4,START-9,0,ALIVE-9,1,ALIVE-9,2,ALIVE-9,3,ALIVE-2,5,START-9,4,ALIVE-2,6,START-9,5,ALIVE-9,6,ALIVE-9,7,ALIVE-9,8,ALIVE-0,6,START-0,8,START-3,8,START-2,7,START-2,8,START-1,2,START-1,6,START-1,8,START-7,6,START-7,8,START-4,2,START-4,6,START-5,2,START-9,0,ALIVE-1,2,START-8,0,START-0,2,START-0,6,START-0,8,START-5,6,START-6,1,START-6,2,START-6,4,START-6,5,START-7,2,START-7,6,START-9,1,ALIVE-9,2,ALIVE-9,3,ALIVE-9,4,ALIVE-9,5,ALIVE-9,6,ALIVE-9,7,ALIVE-9,8,ALIVE-1,6,START-1,8,START-2,1,START-2,3,START-2,4,START-2,5,START-2,6,START-2,7,START-3,2,START-3,6,START-8,1,START-8,2,START-8,3,START-8,4,START-8,5,START-8,6,START-8,7,START",
	}

	return PreRunResults{results5, results10,}
}

//-----------Private functions-----------

func (p *PreRunResults) getPreResultsLeader(i int, crash int) string {
	if crash == 1 {
		return "1"
	}
	switch i {
	case 5:
		return p.results5["leader"]
	case 10:
		return p.results10["leader"]
	}
	return "error (GetPreResultsLeader)"
}

func (p *PreRunResults) getPreResultsMessages(i int, crash int) string {
	switch i {
	case 5:
		if crash == 0 {
			return p.results5["results"]
		} else {
			return p.results5["crashResults"]
		}
	case 10:
		if crash == 0 {
			return p.results10["results"]
		} else {
			return p.results10["crashResults"]
		}
	}
	return "error (GetPreResultsMessages)"
}

//-----------Public functions-----------

func (p *PreRunResults) GetFullResults(i int, crash int) string {
	lead := p.getPreResultsLeader(i, crash)
	res := p.getPreResultsMessages(i, crash)

	return fmt.Sprintf("%s:%s", lead, res)
}